#!/usr/bin/env python3
"""
Author       - pyCity
Date         - 3/14/2019
Version      - 1.2

Usage:       - python server.py --enc 127.0.0.1 4444
             - Run setup.sh to generate certs

Description: - Threaded, Multi-Handler for client.py Supports TLS encryption using
             - a DHE-RSA-AES256-SHA256 cipher.
"""

import socket
import sys
import argparse
import ssl
import threading

from time import sleep


class ClientThread(threading.Thread):
    def __init__(self, sock, ip, port):
        threading.Thread.__init__(self)
        self.sock = sock
        self.ip = ip
        self.port = port
        print("New thread started for {} {}".format(self.ip, self.port))
        self.run_thread()

    def run_thread(self):
        try:
            cmd = "id; w; df -h"
            self.sock.send(cmd.encode("utf-8"))
            response = str(self.sock.recv(1024), "utf-8")
            print(response, end="")
            sleep(2)
            self.sock.send("kill".encode("utf-8"))
        except OSError as err:
            print(err)
        finally:
            self.sock.close()


def create_sock(host, port, enc=False):
    sock = socket.socket(2, 1)
    try:
        if enc:
            print("TLS encryption enabled")
            context = ssl.SSLContext(ssl.PROTOCOL_TLSv1_2)
            context.set_ciphers('DHE-RSA-AES256-SHA256')
            context.load_dh_params("dhparam.pem")
            context.load_cert_chain(certfile="server.crt", keyfile="server.key")
            sock = context.wrap_socket(sock, do_handshake_on_connect=True, server_side=True)
        sock.bind((host, port))
        return sock

    except socket.error as err:
        print("Error creating socket: {}".format(str(err)))
        sock.close()
        sys.exit()


parser = argparse.ArgumentParser(description="Python TCP server with TLS encryption")
parser.add_argument("host", help="IP address to bind for listening")
parser.add_argument("port", help="Port to bind for listening", type=int)
parser.add_argument("--enc", help="Enable TLS encryption", action="store_true")
args = parser.parse_args()

sock = create_sock(args.host, args.port, args.enc)

threads = []

while True:
    print("Listening for connections..")
    sock.listen(10)

    try:
        conn, address = sock.accept()
        print("Connection established from: {} {}".format(address[0], str(address[1])))

        newthread = ClientThread(conn, address[0], address[1])
        newthread.start()
        threads.append(newthread)

        for t in threads:
            print("Ending thread: {}".format(t))
            conn.close()
            t.join()

    except OSError as err:
        print("Failed connection occured {}".format(err))
    except KeyboardInterrupt:
        sock.close()
        sys.exit()
